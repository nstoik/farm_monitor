version: "3.8"

services:
    server:
        image: nstoik/fm_server:${FM_SERVER_TAG}
        container_name: fm_server
        build:
           context: ./server
           dockerfile: Dockerfile
        environment:
            # Specify which application to run in the start.sh script
            - FM_SERVER_RUN=true
            - FM_SERVER_PRESENCE_PORT=${FM_SERVER_PRESENCE_PORT}
            - FM_SERVER_CONFIG=${FM_SERVER_CONFIG}
            - FM_SERVER_LOG_LEVEL=${FM_SERVER_LOG_LEVEL}
            - FM_SERVER_CELERY_LOG_LEVEL=${FM_SERVER_CELERY_LOG_LEVEL}
            - FM_DATABASE_CONFIG=${FM_DATABASE_CONFIG}
        networks:
            - farm_monitor
        volumes:
            - "logs:/logs"
        depends_on:
           - "database"
        restart: on-failure
        labels:
            - custom.label=farm_monitor
    # couldn't get UDP presence service to work with traefik.
    # so, skipping it for now.
    #    labels:
    #        - "traefik.enable=true"
    #        - "traefik.udp.routers.fm_server.entrypoints=presence"
    #        - "traefik.udp.routers.fm_server.service=fm_server"
    #        - "traefik.udp.services.fm_server.loadbalancer.server.port=5554"

    api:
        image: nstoik/fm_api:${FM_API_TAG}
        container_name: fm_api
        build:
            context: ./api
            dockerfile: Dockerfile
        environment:
            - FM_DATABASE_CONFIG=${FM_DATABASE_CONFIG}
            - FM_API_PORT=${FM_API_PORT}
            - FM_API_SECRET=${FM_API_SECRET}
            - FM_API_JWT_SECRET=${FM_API_JWT_SECRET}
            - FM_API_PREFIX=${FM_API_PREFIX}
            - FM_API_OPENAPI_URL_PREFIX=${FM_API_OPENAPI_URL_PREFIX}
            - FLASK_ENV=${FM_API_FLASK_ENV}
            - FLASK_APP=${FM_API_FLASK_APP}
        networks:
            - farm_monitor
        restart: unless-stopped
        healthcheck:
            test: wget -O - http://localhost:${FM_API_PORT}/healthcheck || exit 1
        labels:
          - custom.label=farm_monitor
          - "traefik.enable=true"
          - "traefik.http.services.fm_api.loadbalancer.server.port=${FM_API_PORT}"
          - "traefik.http.routers.fm_api.service=fm_api"

    frontend:
        image: nstoik/fm_frontend:${FM_FRONTEND_TAG}
        container_name: fm_frontend
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                VUE_APP_API_HOSTNAME: ${VUE_APP_API_HOSTNAME}
                VUE_APP_API_PREFIX: ${VUE_APP_API_PREFIX}
                VUE_APP_API_PORT: ${VUE_APP_API_PORT}
                VUE_APP_API_PROTOCOL: ${VUE_APP_API_PROTOCOL}
                VUE_APP_PUBLIC_PATH: ${VUE_APP_PUBLIC_PATH}
        depends_on:
            - api
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
          - custom.label=farm_monitor
          - "traefik.enable=true"
          - "traefik.http.middlewares.frontend_strip_prefix.stripprefix.prefixes=/frontend"
          - "traefik.http.routers.fm_frontend.middlewares=frontend_strip_prefix@docker"
          - "traefik.http.services.fm_frontend.loadbalancer.server.port=80"

    # traefik contrainer configuration below
    traefik:
        image: traefik:latest
        container_name: fm_traefik
        networks:
            - farm_monitor
        # ports are set in the docker-compose.dev and docker-compose.prod files
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - traefik:/letsencrypt
        environment:
            - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
            - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
        restart: unless-stopped
        healthcheck:
            test: traefik healthcheck
            interval: 30s
            timeout: 10s
            retries: 3
        depends_on:
            - frontend
            - api
            - database_management
            - server
        labels:
            - custom.label=farm_monitor
    
    
    # standard docker containers below

    rabbitmq:
        image: rabbitmq:management
        container_name: fm_rabbitmq
        hostname: rabbitmq
        volumes:
            - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
            - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
            - rabbitmq_data:/var/lib/rabbitmq/
        networks:
            - farm_monitor
        restart: unless-stopped
        healthcheck:
            test: rabbitmq-diagnostics -q ping
        labels:
            - custom.label=farm_monitor
            - "traefik.enable=true"
            # RabbitMQ Management interface
            # this middleware redirects to a trailing slash if not present
            - "traefik.http.middlewares.rabbitmq_redirect_slash.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$"
            - "traefik.http.middlewares.rabbitmq_redirect_slash.redirectregex.replacement=$${1}/"
            - "traefik.http.middlewares.rabbitmq_redirect_slash.redirectregex.permanent=true"
            # this middleware strips the path prefix
            - "traefik.http.middlewares.rabbitmq_strip_prefix.stripprefix.prefixes=/rabbitmq"
            - "traefik.http.routers.fm_rabbitmq.middlewares=rabbitmq_redirect_slash@docker,rabbitmq_strip_prefix@docker"
            - "traefik.http.services.fm_rabbitmq.loadbalancer.server.port=${RABBITMQ_MANAGEMENT_PORT}"
            - "traefik.http.routers.fm_rabbitmq.service=fm_rabbitmq"
            # RabbitMQ
            - "traefik.tcp.routers.fm_rabbitmq-connect.entrypoints=rabbitmq"
            - "traefik.tcp.services.fm_rabbitmq-connect.loadbalancer.server.port=${RABBITMQ_DEFAULT_PORT}"
            - "traefik.tcp.routers.fm_rabbitmq-connect.service=fm_rabbitmq-connect"

    flower:
        image: nstoik/fm_flower:${FM_FLOWER_TAG}
        container_name: fm_flower
        build:
           context: ./flower
           dockerfile: Dockerfile
        command: ["celery", "flower", "--url_prefix=flower"] 
        volumes:
            - "flower_data:/data"
        environment:
            - CELERY_BROKER_URL=${FLOWER_CELLERY_BROKER_URL}
        networks:
            - farm_monitor
        depends_on:
            - rabbitmq
        restart: unless-stopped
        healthcheck:
            test: wget -O - http://localhost:${FLOWER_PORT}/flower/healthcheck || exit 1
        labels:
            - custom.label=farm_monitor
            - "traefik.enable=true"
            # this middleware redirects to a trailing slash if not present
            - "traefik.http.middlewares.fm_flower_redirect_slash.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$"
            - "traefik.http.middlewares.fm_flower_redirect_slash.redirectregex.replacement=$${1}/"
            - "traefik.http.middlewares.fm_flower_redirect_slash.redirectregex.permanent=true"
            - "traefik.http.routers.fm_flower.middlewares=fm_flower_redirect_slash@docker"
            - "traefik.http.services.fm_flower.loadbalancer.server.port=${FLOWER_PORT}"
            - "traefik.http.routers.fm_flower.service=fm_flower"

    database:
        image: postgres:14
        container_name: fm_database
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - "dbdata:/var/lib/postgresql/data"
        networks:
            - farm_monitor
        restart: unless-stopped
        healthcheck:
            test: pg_isready -U ${POSTGRES_USER}
        labels:
          - custom.label=farm_monitor

    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: fm_pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            SCRIPT_NAME: /pgadmin
        volumes:
            - pgadmin:/root/.pgadmin
            - pgadmin:/var/lib/pgadmin
            - ./pgadmin/server_definition.json:/pgadmin4/servers.json:ro
        networks:
            - farm_monitor
        depends_on:
            - database
        restart: unless-stopped
        healthcheck:
            test: wget -O - http://localhost:80/pgadmin/misc/ping || exit 1
            start_period: 140s
        labels:
            - custom.label=farm_monitor
            - "traefik.enable=true"
            # pgadmin
            - "traefik.http.services.fm_pgadmin.loadbalancer.server.port=80"
            - "traefik.http.routers.fm_pgadmin.service=fm_pgadmin"

volumes:
    logs:
    rabbitmq_data:
    flower_data:
    dbdata:
    pgadmin:
    traefik:

networks:
    farm_monitor:
        name: farm_monitor
