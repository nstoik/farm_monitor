version: "3.8"

services:
    server:
        image: nstoik/farm_monitor_server:latest
        container_name: fm_server
        build:
           context: ./server
           dockerfile: Dockerfile
        environment:
            - FM_DATABASE_CONFIG=${FM_DATABASE_CONFIG}
        networks:
            - farm_monitor
        volumes:
            - "logs:/logs"
        depends_on:
           - "database"
        restart: on-failure
    # couldn't get UDP presence service to work with traefik.
    # so, skipping it for now.
    #    labels:
    #        - "traefik.enable=true"
    #        - "traefik.udp.routers.fm_server.entrypoints=presence"
    #        - "traefik.udp.routers.fm_server.service=fm_server"
    #        - "traefik.udp.services.fm_server.loadbalancer.server.port=5554"
    server_worker:
        image: nstoik/farm_monitor_server:latest
        container_name: fm_server_worker
        # specifically run the celery worker, not the normal run command.
        command: ["pipenv", "run", "fm_server", "run-worker"]
        build:
            context: ./server
            dockerfile: Dockerfile
        environment:
            - FM_DATABASE_CONFIG=${FM_DATABASE_CONFIG}
        networks:
            - farm_monitor
        volumes:
            - "logs:/logs"
        depends_on:
            - "database"
            - "rabbitmq"
        restart: on-failure

    # in order to reduce the number of unique containers, we use the same container
    # as fm_server since the fm_database package and commands are included in
    # that container.
    database_management:
        image: nstoik/farm_monitor_server:latest
        container_name: fm_database_management
        command: ["pipenv", "run", "fm_database", "update", "database-upgrade", "--revision", "head"]
        build:
            context: ./server
            dockerfile: Dockerfile
        environment:
            - FM_DATABASE_CONFIG=${FM_DATABASE_CONFIG}
        networks:
            - farm_monitor
        depends_on:
            - "database"
        restart: on-failure

    api:
        image: nstoik/farm_monitor_api:latest
        container_name: fm_api
        build:
            context: ./api
            dockerfile: Dockerfile
        environment:
            - FM_DATABASE_CONFIG=${FM_DATABASE_CONFIG}
            - FM_API_PORT=${FM_API_PORT}
            - FM_API_SECRET=${FM_API_SECRET}
            - FM_API_JWT_SECRET=${FM_API_JWT_SECRET}
            - FM_API_PREFIX=${FM_API_PREFIX}
            - FM_API_OPENAPI_URL_PREFIX=${FM_API_OPENAPI_URL_PREFIX}
            - FLASK_ENV=${FM_API_FLASK_ENV}
            - FLASK_APP=${FM_API_FLASK_APP}
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.fm_api.rule=PathPrefix(`/api`)"
          - "traefik.http.routers.fm_api.entrypoints=web"
          - "traefik.http.services.fm_api.loadbalancer.server.port=${FM_API_PORT}"
          - "traefik.http.routers.fm_api.service=fm_api"

    frontend:
        image: nstoik/farm_monitor_frontend:latest
        container_name: fm_frontend
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                VUE_APP_API_HOSTNAME: ${VUE_APP_API_HOSTNAME}
                VUE_APP_API_PREFIX: ${VUE_APP_API_PREFIX}
                VUE_APP_API_PORT: ${VUE_APP_API_PORT}
                VUE_APP_API_PROTOCOL: ${VUE_APP_API_PROTOCOL}
                VUE_APP_PUBLIC_PATH: ${VUE_APP_PUBLIC_PATH}
        depends_on:
            - api
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.fm_frontend.rule=PathPrefix(`/frontend`)"
          - "traefik.http.middlewares.frontend_strip_prefix.stripprefix.prefixes=/frontend"
          - "traefik.http.routers.fm_frontend.middlewares=frontend_strip_prefix@docker"
          - "traefik.http.routers.fm_frontend.entrypoints=web"
          - "traefik.http.services.fm_frontend.loadbalancer.server.port=80"

    # traefik contrainer configuration below
    traefik:
        image: traefik:latest
        container_name: fm_traefik
        networks:
            - farm_monitor
        # ports are set in the docker-compose.dev and docker-compose.prod files
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        restart: unless-stopped
        depends_on:
            - frontend
            - api
            - database_management
            - server
    
    
    # standard docker containers below

    rabbitmq:
        image: rabbitmq:management
        container_name: fm_rabbitmq
        hostname: rabbitmq
        volumes:
            #- ./.docker/rabbitmq/etc/:/etc/rabbitmq/
            - rabbitmq_data:/var/lib/rabbitmq/
            #- ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
            RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            # RabbitMQ Management interface
            - "traefik.http.routers.fm_rabbitmq.rule=PathPrefix(`/rabbitmq`)"
            # this middleware redirects to a trailing slash if not present
            - "traefik.http.middlewares.rabbitmq_redirect_slash.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$"
            - "traefik.http.middlewares.rabbitmq_redirect_slash.redirectregex.replacement=$${1}/"
            - "traefik.http.middlewares.rabbitmq_redirect_slash.redirectregex.permanent=true"
            # this middleware strips the path prefix
            - "traefik.http.middlewares.rabbitmq_strip_prefix.stripprefix.prefixes=/rabbitmq"
            - "traefik.http.routers.fm_rabbitmq.middlewares=rabbitmq_redirect_slash@docker,rabbitmq_strip_prefix@docker"
            - "traefik.http.routers.fm_rabbitmq.entrypoints=web"
            - "traefik.http.services.fm_rabbitmq.loadbalancer.server.port=${RABBITMQ_MANAGEMENT_PORT}"
            - "traefik.http.routers.fm_rabbitmq.service=fm_rabbitmq"
            # RabbitMQ
            #- "traefik.tcp.routers.fm_rabbitmq-connect.rule=HostSNI(`${TRAEFIK_DOMAIN}`)"
            - "traefik.tcp.routers.fm_rabbitmq-connect.rule=HostSNI(`*`)"
            - "traefik.tcp.routers.fm_rabbitmq-connect.entrypoints=rabbitmq"
            - "traefik.tcp.services.fm_rabbitmq-connect.loadbalancer.server.port=${RABBITMQ_DEFAULT_PORT}"
            - "traefik.tcp.routers.fm_rabbitmq-connect.service=fm_rabbitmq-connect"

    flower:
        image: mher/flower:latest
        container_name: fm_flower
        volumes:
            - "flower_data:/data"
        environment:
            - CELERY_BROKER_URL=${FLOWER_CELLERY_BROKER_URL}
        networks:
            - farm_monitor
        depends_on:
            - rabbitmq
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            # Flower
            - "traefik.http.routers.fm_flower.rule=Host(`flower.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.fm_flower.entrypoints=web"
            - "traefik.http.services.fm_flower.loadbalancer.server.port=${FLOWER_PORT}"
            - "traefik.http.routers.fm_flower.service=fm_flower"

    database:
        image: postgres:11
        container_name: fm_database
        restart: unless-stopped
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - "dbdata:/var/lib/postgresql/data"
        networks:
            - farm_monitor

    pgadmin:
        container_name: fm_pgadmin
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        volumes:
            - pgadmin:/root/.pgadmin
            - pgadmin:/var/lib/pgadmin
            - "./pgadmin/server_definition.json:/pgadmin4/servers.json:ro"
        networks:
            - farm_monitor
        depends_on:
            - database
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            # pgadmin
            - "traefik.http.routers.fm_pgadmin.rule=Host(`pgadmin.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.fm_pgadmin.entrypoints=web"
            - "traefik.http.services.fm_pgadmin.loadbalancer.server.port=80"
            - "traefik.http.routers.fm_pgadmin.service=fm_pgadmin"

volumes:
    logs:
    rabbitmq_data:
    flower_data:
    dbdata:
    pgadmin:

networks:
    farm_monitor:
        name: farm_monitor
