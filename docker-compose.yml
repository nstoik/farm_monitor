version: "3.8"

services:
    server:
        image: nstoik/farm_monitor_server:latest
        container_name: fm_server
        build:
           context: ./server
           dockerfile: Dockerfile
        networks:
            - farm_monitor
        volumes:
            - "logs:/logs"
        depends_on:
           - "database"
        restart: on-failure
    # couldn't get UDP presence service to work with traefik.
    # so, skipping it for now.
    #    labels:
    #        - "traefik.enable=true"
    #        - "traefik.udp.routers.fm_server.entrypoints=presence"
    #        - "traefik.udp.routers.fm_server.service=fm_server"
    #        - "traefik.udp.services.fm_server.loadbalancer.server.port=5554"
    server_worker:
        image: nstoik/farm_monitor_server:latest
        container_name: fm_server_worker
        # specifically run the celery worker, not the normal run command.
        command: ["pipenv", "run", "fm_server", "run-worker"]
        build:
            context: ./server
            dockerfile: Dockerfile
        networks:
            - farm_monitor
        volumes:
            - "logs:/logs"
        depends_on:
            - "database"
            - "rabbitmq"
        restart: on-failure

    # in order to reduce the number of unique containers, we use the same container
    # as fm_server since the fm_database package and commands are included in
    # that container.
    database_management:
        image: nstoik/farm_monitor_server:latest
        container_name: fm_database_management
        command: ["pipenv", "run", "fm_database", "update", "database-upgrade", "--revision", "head"]
        build:
            context: ./server
            dockerfile: Dockerfile
        networks:
            - farm_monitor
        depends_on:
            - "database"
        restart: on-failure

    api:
        image: nstoik/farm_monitor_api:latest
        container_name: fm_api
        build:
            context: ./api
            dockerfile: Dockerfile
        ports:
            - ${FM_API_PORT}
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          # enable the docs to be loaded by traefik with no extra path.
          # this configuration adds the '/docs/swagger' if the '/' path is visited.
          - "traefik.http.routers.fm_api_doc.rule=Host(`api.localhost`) && Path(`/`)"
          - "traefik.http.middlewares.doc_strip_prefix.stripprefix.forceSlash=false"
          - "traefik.http.middlewares.doc_strip_prefix.stripprefix.prefixes=/"
          - "traefik.http.middlewares.doc_add_prefix.addprefix.prefix=/doc/swagger"
          - "traefik.http.routers.fm_api_doc.middlewares=doc_strip_prefix@docker,doc_add_prefix@docker"
          - "traefik.http.services.fm_api_doc.loadbalancer.server.port=${FM_API_PORT}"
          - "traefik.http.routers.fm_api_doc.service=fm_api_doc"
          # enable the rest of the api and files to be served as normal.
          - "traefik.http.routers.fm_api.rule=Host(`api.localhost`)"
          - "traefik.http.services.fm_api.loadbalancer.server.port=${FM_API_PORT}"
          - "traefik.http.routers.fm_api.service=fm_api"

    frontend:
        image: nstoik/farm_monitor_frontend:latest
        container_name: fm_frontend
        build:
            context: ./frontend
            dockerfile: Dockerfile
            # args:
        environment:
          - VUE_APP_API_HOSTNAME=$VUE_APP_API_HOSTNAME
          - VUE_APP_API_PORT=$VUE_APP_API_PORT
        depends_on:
            - api
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.fm_frontend.rule=Host(`frontend.localhost`)"
          - "traefik.http.services.fm_frontend.loadbalancer.server.port=80"

    # traefik contrainer configuration below
    traefik:
        image: traefik:latest
        container_name: fm_traefik
        networks:
            - farm_monitor
        # ports are set in the docker-compose.dev and docker-compose.prod files
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        restart: unless-stopped
        depends_on:
            - frontend
            - api
            - database_management
            - server
    
    
    # standard docker containers below

    rabbitmq:
        image: rabbitmq:management
        container_name: fm_rabbitmq
        hostname: rabbitmq
        volumes:
            #- ./.docker/rabbitmq/etc/:/etc/rabbitmq/
            - rabbitmq_data:/var/lib/rabbitmq/
            #- ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
        environment:
            RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
            RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
            RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_DEFAULT_VHOST}"
        #ports:
        #    - ${RABBITMQ_DEFAULT_PORT}:5672 # RabbitMQ port
        #    - ${RABBITMQ_MANAGEMENT_PORT}:15672 # Management interface
        networks:
            - farm_monitor
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            # RabbitMQ Management interface
            - "traefik.http.routers.fm_rabbitmq.rule=Host(`mq.localhost`)"
            - "traefik.http.routers.fm_rabbitmq.entrypoints=web"
            - "traefik.http.services.fm_rabbitmq.loadbalancer.server.port=${RABBITMQ_MANAGEMENT_PORT}"
            - "traefik.http.routers.fm_rabbitmq.service=fm_rabbitmq"
            # RabbitMQ
            #- "traefik.tcp.routers.fm_rabbitmq-connect.rule=HostSNI(`mq-connect.localhost`)"
            - "traefik.tcp.routers.fm_rabbitmq-connect.rule=HostSNI(`*`)"
            - "traefik.tcp.routers.fm_rabbitmq-connect.entrypoints=rabbitmq"
            - "traefik.tcp.services.fm_rabbitmq-connect.loadbalancer.server.port=${RABBITMQ_DEFAULT_PORT}"
            - "traefik.tcp.routers.fm_rabbitmq-connect.service=fm_rabbitmq-connect"

    flower:
        image: mher/flower:latest
        container_name: fm_flower
        volumes:
            - "flower_data:/data"
        environment:
            - CELERY_BROKER_URL=${FLOWER_CELLERY_BROKER_URL}
        ports:
            - ${FLOWER_PORT}:5555 # flower web interface
        networks:
            - farm_monitor
        restart: unless-stopped

    database:
        image: postgres:11
        container_name: fm_database
        restart: unless-stopped
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - "dbdata:/var/lib/postgresql/data"
        networks:
            - farm_monitor

    pgadmin:
        container_name: fm_pgadmin
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        volumes:
            - pgadmin:/root/.pgadmin
            - pgadmin:/var/lib/pgadmin
        ports:
            - ${PGADMIN_PORT}:80
        networks:
            - farm_monitor
        restart: unless-stopped

volumes:
    logs:
    rabbitmq_data:
    flower_data:
    dbdata:
    pgadmin:

networks:
    farm_monitor:
        name: farm_monitor
